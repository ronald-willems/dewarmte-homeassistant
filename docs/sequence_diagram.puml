@startuml DeWarmte Integration Flow

skinparam ParticipantPadding 20
skinparam BoxPadding 10
skinparam sequenceMessageAlign center

box "Home Assistant" #LightBlue
participant "Home Assistant\nCore" as HA
participant "DeWarmte\nCoordinator" as Coordinator
participant "DeWarmte API\n(api.py)" as API
participant "DeWarmte Auth\n(auth.py)" as Auth
participant "DeWarmte Sensors\n(sensor.py)" as Sensors
participant "DeWarmte Switches\n(switch.py)" as Switches
end box

box "External" #LightGreen
participant "MyDeWarmte\nWebsite" as Website
end box

== Initialization ==
HA -> Coordinator: async_setup_entry()
activate Coordinator
Coordinator -> API: Create DeWarmteAPI client
activate API
API -> Auth: Create auth handler
activate Auth
Coordinator -> Sensors: Create sensor entities
activate Sensors
Coordinator -> Switches: Create switch entities
activate Switches

== Authentication ==
API -> Auth: async_login()
Auth -> Website: GET /
Website --> Auth: Login page + CSRF token
Auth -> Website: POST / (credentials + CSRF)
Website --> Auth: Redirect to status page
Auth --> API: Success + tokens (device_id, product_id)
API --> Coordinator: Login success

== Data Update Cycle ==
loop Every 60 seconds
    Coordinator -> API: async_get_status_data()
    API -> Auth: Get headers + base URL
    Auth --> API: Current headers
    API -> Website: GET /status/{device_id}/{product_id}
    Website --> API: Status page HTML
    API -> API: Parse sensor values
    API --> Coordinator: Return sensor data

    Coordinator -> API: async_get_basic_settings()
    API -> Auth: Get headers + base URL
    Auth --> API: Current headers
    API -> Website: GET /basic_settings/{device_id}/{product_id}
    Website --> API: Settings page HTML
    API -> API: Parse settings values
    API --> Coordinator: Return settings data

    Coordinator -> Sensors: Update sensor states
    Coordinator -> Switches: Update switch states
    Sensors --> HA: Report new sensor states
    Switches --> HA: Report new switch states
end

== Switch Control Flow ==
HA -> Switches: Turn On/Off request
activate Switches
Switches -> API: async_update_basic_setting()
API -> Website: GET /basic_settings/{device_id}/{product_id}
Website --> API: Settings page + CSRF token
API -> Website: POST /basic_settings/ (setting + CSRF)
Website --> API: Success/Error response
API --> Switches: Return success/failure
Switches -> Coordinator: Request immediate update
deactivate Switches

== Error Handling ==
alt Login Failed
    Auth -> Website: POST / (login)
    Website --> Auth: Error response
    Auth --> API: Login failed
    API --> Coordinator: Login failed
    Coordinator -> HA: Raise ConfigEntryNotReady
else No Status Data
    API -> Website: GET /status/...
    Website --> API: Empty/Invalid response
    API --> Coordinator: Empty data
    Coordinator -> HA: Raise UpdateFailed
else Settings Update Failed
    API -> Website: POST /settings/...
    Website --> API: Error response
    API --> Switches: Return failure
    Switches -> HA: Report error state
end

== Cleanup ==
HA -> Coordinator: async_unload_entry()
Coordinator -> Sensors: Remove entities
deactivate Sensors
Coordinator -> Switches: Remove entities
deactivate Switches
Coordinator -> API: Close session
API -> Auth: Cleanup
deactivate Auth
deactivate API
deactivate Coordinator

@enduml 